
-----

## 1\. Configuraci√≥n del Proyecto y Permisos

### 1.1. `AndroidManifest.xml` (Permisos y FileProvider) üì∏

El `FileProvider` y el permiso de `CAMERA` son necesarios. El nombre de la *activity* y el `FileProvider` se mantienen igual que en el ejemplo de fotos para simplificar.

```xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.CAMERA" />
    <uses-feature android:name="android.hardware.camera" android:required="true" />
    
    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.TuProyectoCamaraInterna">

        <provider
            android:name="androidx.core.content.FileProvider"
            android:authorities="${applicationId}.fileprovider"
            android:exported="false"
            android:grantUriPermissions="true">
            <meta-data
                android:name="android.support.FILE_PROVIDER_PATHS"
                android:resource="@xml/file_paths" />
        </provider>

        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>
</manifest>
```

-----

### 1.2. `res/xml/file_paths.xml` (Rutas del FileProvider) üõ†Ô∏è

Se utiliza la etiqueta `<files-path>` para apuntar al directorio `files/videos/` dentro de la memoria interna privada de la aplicaci√≥n.

```xml
<?xml version="1.0" encoding="utf-8"?>
<paths>
    <files-path name="my_internal_videos" path="videos/" />
</paths>
```

-----

## 2\. Interfaz de Usuario

### 2.1. `res/layout/activity_main.xml` (Layout de Interfaz) üñºÔ∏è

El layout utiliza un `VideoView` para la reproducci√≥n y un `Button` para iniciar la grabaci√≥n.

```xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp"
    tools:context=".MainActivity">

    <Button
        android:id="@+id/button_grabar_video"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Grabar Video (Memoria Interna)"
        android:layout_marginBottom="16dp"/>

    <TextView
        android:id="@+id/textView_path"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Ruta: Pendiente"
        android:layout_marginBottom="8dp"/>

    <VideoView
        android:id="@+id/video_view"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1"
        android:layout_gravity="center"
        android:background="#CCCCCC"/>

</LinearLayout>
```

-----

## 3\. L√≥gica Java

### 3.1. `MainActivity.java` (L√≥gica de Java - Memoria Interna) üíª

El c√≥digo adapta la l√≥gica de `FileProvider` para crear un archivo **.mp4** en la memoria interna y utiliza `VideoView` para la reproducci√≥n.

```java
package com.curso.ejemplo13cameravideo;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.content.ContextCompat;
import androidx.core.content.FileProvider;

import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.Log;
import android.widget.Button;
import android.widget.TextView;
import android.widget.MediaController; // Importar MediaController
import android.widget.Toast;
import android.widget.VideoView; // Importar VideoView

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

public class MainActivity extends AppCompatActivity {
    
    private static final String TAG = "CameraVideoInternal";
    private Button buttonGrabarVideo;
    private TextView textViewPath;
    private VideoView videoView;
    
    private String currentVideoPath; // Ruta absoluta del archivo en la memoria interna
    private Uri videoURI; // URI seguro de FileProvider

    private ActivityResultLauncher<String> requestPermissionLauncher;
    private ActivityResultLauncher<Intent> takeVideoLauncher;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        buttonGrabarVideo = findViewById(R.id.button_grabar_video);
        textViewPath = findViewById(R.id.textView_path);
        videoView = findViewById(R.id.video_view);

        // 1. Inicializar los ActivityResultLaunchers
        setupLaunchers();
        
        // 2. Manejar el click del bot√≥n
        buttonGrabarVideo.setOnClickListener(v -> handleCameraAction());
        
        // 3. Revisar el estado inicial
        updateButtonTextAndToast();
    }
    
    // ---------------------- CONFIGURACI√ìN DE LAUNCHERS ----------------------

    private void setupLaunchers() {
        
        // A. Launcher para solicitar el permiso de C√ÅMARA
        requestPermissionLauncher = registerForActivityResult(
            new ActivityResultContracts.RequestPermission(),
            isGranted -> {
                if (isGranted) {
                    buttonGrabarVideo.setText("Grabar Video (Memoria Interna)");
                    Toast.makeText(this, "Permisos concedidos. Abriendo c√°mara... ‚úÖ", Toast.LENGTH_SHORT).show();
                    dispatchTakeVideoIntent(); 
                } else {
                    buttonGrabarVideo.setText("Permiso Denegado: Reintentar");
                    Toast.makeText(this, "Permiso de C√°mara denegado. ‚ùå", Toast.LENGTH_LONG).show();
                }
            }
        );
        
        // B. Launcher para la actividad de la C√ÅMARA
        takeVideoLauncher = registerForActivityResult(
            new ActivityResultContracts.StartActivityForResult(),
            result -> {
                if (result.getResultCode() == RESULT_OK) {
                    if (currentVideoPath != null) {
                        playVideo(); // Muestra el video
                        textViewPath.setText("Ruta Guardada: " + currentVideoPath);
                        Toast.makeText(this, "Video guardado y listo para reproducir.", Toast.LENGTH_LONG).show();
                    }
                } else {
                    Toast.makeText(this, "Grabaci√≥n de video cancelada o fallida.", Toast.LENGTH_SHORT).show();
                    currentVideoPath = null;
                    videoURI = null;
                }
            }
        );
    }
    
    // ---------------------- GESTI√ìN DEL FLUJO DE PERMISOS ----------------------
    
    private void updateButtonTextAndToast() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
             buttonGrabarVideo.setText("Solicitar Permiso de C√°mara");
        } else {
             buttonGrabarVideo.setText("Grabar Video (Memoria Interna)");
        }
    }

    private void handleCameraAction() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED) {
            dispatchTakeVideoIntent();
        } else {
            requestPermissionLauncher.launch(Manifest.permission.CAMERA);
        }
    }
    
    // ---------------------- L√ìGICA DE LA C√ÅMARA Y ARCHIVOS ----------------------

    private void dispatchTakeVideoIntent() {
        Intent takeVideoIntent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);
        
        if (takeVideoIntent.resolveActivity(getPackageManager()) != null) {

            File videoFile = null;
            try {
                // 1. Crea el archivo de destino en la memoria INTERNA (privada de la app)
                videoFile = createVideoFile();
            } catch (IOException ex) {
                Log.e(TAG, "Error al crear el archivo de video: " + ex.getMessage());
                Toast.makeText(this, "Error al crear archivo de video", Toast.LENGTH_SHORT).show();
                return;
            }

            if (videoFile != null) {
                // 2. Obtener un URI seguro usando FileProvider
                videoURI = FileProvider.getUriForFile(
                        this,
                        getApplicationContext().getPackageName() + ".fileprovider",
                        videoFile
                );
                
                // 3. Conceder permisos temporales a la app de c√°mara
                takeVideoIntent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION | Intent.FLAG_GRANT_READ_URI_PERMISSION);
                
                // 4. Pasar la URI para que la c√°mara guarde el video
                takeVideoIntent.putExtra(MediaStore.EXTRA_OUTPUT, videoURI);
                
                // OPCIONAL: Limitar la duraci√≥n o calidad (por ejemplo, 10 segundos)
                takeVideoIntent.putExtra(MediaStore.EXTRA_DURATION_LIMIT, 10);
                
                // 5. Lanzar la c√°mara
                takeVideoLauncher.launch(takeVideoIntent);
            }
        } else {
            Toast.makeText(this, "No hay aplicaci√≥n de c√°mara disponible", Toast.LENGTH_SHORT).show();
        }
    }

    /**
     * Crea un archivo MP4 con timestamp en el directorio /data/data/tu.paquete/files/videos/
     * (Memoria Interna de la Aplicaci√≥n).
     */
    private File createVideoFile() throws IOException {
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss", Locale.getDefault()).format(new Date());
        String videoFileName = "MP4_" + timeStamp + "_";

        // CAMBIO CLAVE: Usamos getFilesDir() para la memoria interna y el subdirectorio "videos"
        File storageDir = new File(getFilesDir(), "videos");
        
        if (!storageDir.exists()) {
            storageDir.mkdirs();
        }

        File video = File.createTempFile(
                videoFileName,  
                ".mp4",         
                storageDir      
        );
        
        currentVideoPath = video.getAbsolutePath();
        return video;
    }

    // ---------------------- REPRODUCCI√ìN DE VIDEO ----------------------

    /**
     * Carga el video desde la ruta interna y lo reproduce en el VideoView.
     */
    private void playVideo() {
        if (videoURI == null) return;
        
        // 1. Establecer la URI segura del FileProvider en el VideoView
        videoView.setVideoURI(videoURI);
        
        // 2. A√±adir controles de reproducci√≥n (opcional pero recomendado)
        MediaController mediaController = new MediaController(this);
        mediaController.setAnchorView(videoView);
        videoView.setMediaController(mediaController);
        
        // 3. Iniciar la reproducci√≥n
        videoView.start();
        
        // Para detener el video cuando la actividad se detenga
        videoView.setOnCompletionListener(mp -> {
            Log.d(TAG, "Reproducci√≥n de video finalizada.");
        });
    }
}
```