Solución completa de manejo de ficheros en **Memoria Externa (Tarjeta SD)**, incluyendo el **`AndroidManifest.xml`**, el **Layout de Interfaz**, la lógica de **Permisos** en `MainActivity.java`, y la clase **`ExternalFileHelper.java`** con el CRUD básico (asumiendo una clase `Registro.java` sencilla).

-----

## 1\. Configuración de Permisos (AndroidManifest.xml) 🔑

Debes declarar los permisos de lectura y escritura fuera de la etiqueta `<application>`.

```xml
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.tuapp">

    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>

    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.TuApp">
        
        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>
```

-----

## 2\. Estructura del Modelo (`Registro.java`) 📋

Necesitamos una clase simple para los datos, con métodos de serialización.

```java
// Clase: Registro.java
public class Registro {
    private final String nombre;
    private final String valor;

    public Registro(String nombre, String valor) {
        this.nombre = nombre;
        this.valor = valor;
    }

    // Método para guardar en el archivo (formato: "nombre|valor")
    public String toFileString() {
        return nombre + "|" + valor;
    }

    // Método estático para reconstruir el objeto desde una línea del archivo
    public static Registro fromFileString(String line) {
        if (line == null || line.isEmpty()) return null;
        String[] parts = line.split("\\|");
        if (parts.length == 2) {
            return new Registro(parts[0].trim(), parts[1].trim());
        }
        return null;
    }
    
    @Override
    public String toString() {
        return "Nombre: " + nombre + " | Valor: " + valor;
    }
}
```

-----

## 3\. Lógica de Ficheros (`ExternalFileHelper.java`) 💾

Esta clase maneja la interacción con el archivo en el directorio privado de la app dentro del almacenamiento externo. **Importante**: Incluye el método `agregarRegistro` para la funcionalidad CRUD.

```java
// Clase: ExternalFileHelper.java
package com.example.tuapp;

import android.content.Context;
import android.os.Environment;
import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class ExternalFileHelper {
    private static final String FILENAME = "registros_externos.dat";
    private final File storageDir;

    public ExternalFileHelper(Context context) {
        // Usamos getExternalFilesDir() que no requiere Scoped Storage complejo
        // y se elimina al desinstalar la app, siendo la mejor práctica actual.
        this.storageDir = context.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS);

        if (storageDir != null && !storageDir.exists()) {
            storageDir.mkdirs(); // Crear el directorio si no existe.
        }
    }

    /** Devuelve el objeto File completo donde se almacenarán los datos. */
    private File getFile() {
        return new File(storageDir, FILENAME);
    }
    
    /** Verifica si el almacenamiento externo está disponible para escritura. */
    private boolean isExternalStorageWritable() {
        return Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState());
    }

    // =================================================================
    // ESCRITURA (CRUD)
    // =================================================================
    
    /** Escribe la lista completa de registros al archivo, sobrescribiéndolo. */
    private void sobrescribirArchivo(List<Registro> registros) throws IOException {
        if (!isExternalStorageWritable()) {
             throw new IOException("Almacenamiento externo no disponible para escritura.");
        }

        File file = getFile();
        // Usamos FileOutputStream para escribir directamente al objeto File.
        try (FileOutputStream fos = new FileOutputStream(file)) {
            for (Registro reg : registros) {
                String line = reg.toFileString() + "\n";
                fos.write(line.getBytes());
            }
        }
    }
    
    /** Añade un nuevo registro al archivo. Lógica CRUD: Leer -> Añadir -> Sobrescribir. */
    public void agregarRegistro(Registro nuevoRegistro) throws IOException {
        List<Registro> registrosActuales = leerTodosLosRegistros();
        registrosActuales.add(nuevoRegistro);
        sobrescribirArchivo(registrosActuales);
    }

    // =================================================================
    // LECTURA
    // =================================================================

    /** Lee todos los registros del archivo externo. */
    public List<Registro> leerTodosLosRegistros() {
        List<Registro> registros = new ArrayList<>();
        File file = getFile();

        if (!isExternalStorageWritable() || !file.exists()) {
            return registros;
        }
        
        // Usamos BufferedReader para leer línea por línea
        try (FileInputStream fis = new FileInputStream(file);
             InputStreamReader isr = new InputStreamReader(fis);
             BufferedReader br = new BufferedReader(isr)) {

            String line;
            while ((line = br.readLine()) != null) {
                Registro reg = Registro.fromFileString(line);
                if (reg != null) {
                    registros.add(reg);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return registros;
    }
}
```

-----

## 4\. Layout de Interfaz de Usuario (`activity_main.xml`) 🎨

Usamos un diseño lineal simple para la entrada de datos y la visualización.

```xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp"
    tools:context=".MainActivity">

    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Ficheros en Memoria Externa (SD)"
        android:textSize="18sp"
        android:textStyle="bold"
        android:layout_marginBottom="16dp"/>

    <EditText
        android:id="@+id/et_registro_data"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Ingrese Nombre|Valor para guardar"
        android:inputType="text"/>

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:layout_marginTop="8dp">

        <Button
            android:id="@+id/btn_guardar"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Guardar"
            android:layout_marginEnd="8dp"/>

        <Button
            android:id="@+id/btn_cargar"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Cargar"/>
    </LinearLayout>

    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Registros Almacenados:"
        android:textStyle="italic"
        android:layout_marginTop="16dp"/>

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:background="#EFEFEF"
        android:padding="8dp">
        <TextView
            android:id="@+id/tv_registros_leidos"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Esperando permiso para cargar..."
            android:textColor="@android:color/black"/>
    </ScrollView>

</LinearLayout>
```

-----

## 5\. Lógica Principal (`MainActivity.java`) ⚙️

Esta clase gestiona la **solicitud de permisos en tiempo de ejecución**, inicializa la UI y conecta los botones con la lógica del `ExternalFileHelper`.

```java
// Clase: MainActivity.java
package com.example.tuapp;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import android.Manifest;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import java.io.IOException;
import java.util.List;

public class MainActivity extends AppCompatActivity {

    private EditText etRegistroData;
    private TextView tvRegistrosLeidos;
    
    private ExternalFileHelper fileHelper; 
    
    private static final int STORAGE_PERMISSION_CODE = 101;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        fileHelper = new ExternalFileHelper(this);
        
        // Inicialización de la UI
        etRegistroData = findViewById(R.id.et_registro_data);
        tvRegistrosLeidos = findViewById(R.id.tv_registros_leidos);
        Button btnGuardar = findViewById(R.id.btn_guardar);
        Button btnCargar = findViewById(R.id.btn_cargar);

        // Llamada para solicitar los permisos al iniciar la Activity
        checkAndRequestStoragePermission();
        
        // Listeners
        btnGuardar.setOnClickListener(v -> guardarRegistro());
        btnCargar.setOnClickListener(v -> cargarRegistros());
    }

    // =================================================================
    // LÓGICA DE MANEJO DE ARCHIVOS CON VERIFICACIÓN DE PERMISOS
    // =================================================================
    
    private void guardarRegistro() {
        if (!hasStoragePermission()) {
            Toast.makeText(this, "Permiso de Escritura no concedido. No se puede guardar.", Toast.LENGTH_LONG).show();
            checkAndRequestStoragePermission(); // Reintentar solicitar
            return;
        }

        String data = etRegistroData.getText().toString().trim();
        if (data.isEmpty() || !data.contains("|")) {
            Toast.makeText(this, "Ingrese datos en formato: Nombre|Valor", Toast.LENGTH_SHORT).show();
            return;
        }

        try {
            String[] parts = data.split("\\|");
            Registro nuevoRegistro = new Registro(parts[0].trim(), parts[1].trim());
            
            fileHelper.agregarRegistro(nuevoRegistro); 
            Toast.makeText(this, "Registro guardado correctamente.", Toast.LENGTH_SHORT).show();
            etRegistroData.setText("");
            cargarRegistros(); 
        } catch (IOException e) {
            Toast.makeText(this, "Error de E/S al guardar: " + e.getMessage(), Toast.LENGTH_LONG).show();
        } catch (Exception e) {
             Toast.makeText(this, "Error: " + e.getMessage(), Toast.LENGTH_LONG).show();
        }
    }
    
    private void cargarRegistros() {
        if (!hasStoragePermission()) {
            tvRegistrosLeidos.setText("Permiso denegado. No se pueden leer los datos.");
            return;
        }
        
        List<Registro> registros = fileHelper.leerTodosLosRegistros();
        StringBuilder sb = new StringBuilder();

        if (registros.isEmpty()) {
            sb.append("El archivo está vacío o el almacenamiento externo no está montado.");
        } else {
            for (Registro reg : registros) {
                sb.append(reg.toString()).append("\n"); 
            }
        }
        tvRegistrosLeidos.setText(sb.toString());
    }

    // =================================================================
    // LÓGICA DE PERMISOS
    // =================================================================
    
    private boolean hasStoragePermission() {
        return ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE)
                == PackageManager.PERMISSION_GRANTED;
    }

    /** Verifica si tenemos permiso de escritura. Si no, lo solicita al usuario. */
    private void checkAndRequestStoragePermission() {
        if (!hasStoragePermission()) {
            // Solicitamos los permisos
            ActivityCompat.requestPermissions(this,
                    new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE},
                    STORAGE_PERMISSION_CODE);
        } else {
            // Permisos ya concedidos
            cargarRegistros();
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == STORAGE_PERMISSION_CODE) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                Toast.makeText(this, "Permiso de Almacenamiento Concedido ✅", Toast.LENGTH_SHORT).show();
                cargarRegistros();
            } else {
                Toast.makeText(this, "Permiso Denegado ❌. La funcionalidad de ficheros no estará disponible.", Toast.LENGTH_LONG).show();
                tvRegistrosLeidos.setText("Permiso de Almacenamiento Denegado.");
            }
        }
    }
}
```

****************************
ATENCIÓN SI NO DA PERMISO:
****************************


---

## 1. Localizar la Aplicación de Configuración

Para acceder a la configuración de tu aplicación, debes interactuar con la interfaz del teléfono virtual (el emulador) a la derecha, no con los menús de Android Studio a la izquierda.

1.  **Desliza hacia arriba** desde la parte inferior de la pantalla del emulador para abrir la bandeja de aplicaciones (App Drawer).
2.  Busca y toca el icono de **"Settings"** (Configuración), que se ve como un engranaje.



---

## 2. Acceder a la Información de la Aplicación

Una vez dentro de la aplicación de **Settings** (Configuración):

1.  Busca la opción que dice **"Apps"** o **"Apps & notifications"** (Aplicaciones y notificaciones) y tócala.
2.  Toca **"See all X apps"** (Ver todas las X aplicaciones).
3.  Busca tu aplicación por su nombre de proyecto (`Ejemplo03FicherosMemoriaExterna`) y tócala para abrir su página de información.



---

## 3. Verificar y Habilitar los Permisos

En la página de información de tu aplicación:

1.  Busca y toca la opción **"Permissions"** (Permisos).
2.  Dentro de Permisos, verás la categoría **"Files and media"** (Archivos y contenido multimedia) o simplemente **"Storage"** (Almacenamiento).
3.  Si dice **"Not allowed"** (No permitido) o **"Denied"** (Denegado), toca la categoría e **habilita el permiso**.

Una vez que el permiso de Almacenamiento esté habilitado en esta pantalla, regresa a tu aplicación y presiona el botón **"Cargar"**. El mensaje de "Permiso Denegado" debería desaparecer, y los datos se cargarán correctamente.

