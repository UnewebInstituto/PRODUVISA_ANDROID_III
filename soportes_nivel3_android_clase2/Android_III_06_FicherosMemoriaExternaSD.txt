Con el **SDK 33 (Android 13)** implementado en el AVD, la mejor pr치ctica para el **manejo de archivos en "memoria SD externa" (almacenamiento compartido)** es utilizar los directorios espec칤ficos de la aplicaci칩n dentro del almacenamiento externo, como **`getExternalFilesDir()`**.

Esto se debe a las restricciones de *Scoped Storage* introducidas en Android 10, que hacen obsoleto el uso directo de carpetas p칰blicas como `Environment.getExternalStorageDirectory()`. Al usar `getExternalFilesDir()`, no se necesita el permiso de tiempo de ejecuci칩n **`WRITE_EXTERNAL_STORAGE`**.

A continuaci칩n, tienes un ejemplo completo para **crear, escribir y leer un archivo de texto simple** en el almacenamiento externo.

-----

## 1\. `AndroidManifest.xml` (Permisos M칤nimos) 游닇

Dado que usamos el directorio privado de la aplicaci칩n en el almacenamiento externo (`getExternalFilesDir()`), **no necesitamos ning칰n permiso de almacenamiento** de tiempo de ejecuci칩n (como `WRITE_EXTERNAL_STORAGE` o `READ_MEDIA_*`).

```xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.TuProyectoArchivosExternos">

        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>
</manifest>
```

-----

## 2\. `res/layout/activity_main.xml` (Layout) 游늬

El layout incluir치 campos para ingresar texto, botones para guardar/cargar, y un campo para mostrar el resultado.

```xml
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="16dp"
    tools:context=".MainActivity">

    <TextView
        android:id="@+id/label_entrada"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text="Texto a guardar:"
        android:textSize="18sp"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

    <EditText
        android:id="@+id/editText_data"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:inputType="textMultiLine"
        android:hint="Escribe el contenido del archivo aqu칤"
        android:minLines="3"
        android:maxLines="5"
        android:gravity="top|start"
        android:layout_marginTop="8dp"
        app:layout_constraintTop_toBottomOf="@+id/label_entrada"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

    <Button
        android:id="@+id/button_save"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text="Guardar en SD Externa"
        android:layout_marginTop="16dp"
        android:layout_marginEnd="8dp"
        app:layout_constraintTop_toBottomOf="@+id/editText_data"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toStartOf="@+id/button_load" />

    <Button
        android:id="@+id/button_load"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text="Cargar de SD Externa"
        android:layout_marginTop="16dp"
        app:layout_constraintTop_toBottomOf="@+id/editText_data"
        app:layout_constraintStart_toEndOf="@+id/button_save"
        app:layout_constraintEnd_toEndOf="parent" />
    
    <TextView
        android:id="@+id/label_contenido"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text="Contenido Cargado:"
        android:textSize="18sp"
        android:layout_marginTop="32dp"
        app:layout_constraintTop_toBottomOf="@+id/button_save"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

    <TextView
        android:id="@+id/textView_loaded_data"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text="[A칰n no se ha cargado ning칰n dato]"
        android:padding="8dp"
        android:background="@android:color/darker_gray"
        android:layout_marginTop="8dp"
        app:layout_constraintTop_toBottomOf="@+id/label_contenido"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

</androidx.constraintlayout.widget.ConstraintLayout>
```

-----

## 3\. `MainActivity.java` (L칩gica de Almacenamiento Externo - SDK 33) 游눹

Usamos **`getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS)`** para crear y acceder al archivo. Esta ruta apunta a una carpeta que se encuentra en la memoria SD o principal del dispositivo, pero est치 protegida para ser gestionada 칰nicamente por nuestra aplicaci칩n.

```java
package com.curso.ejemplo09archivosmemoriaexterna;

import androidx.appcompat.app.AppCompatActivity;

import android.os.Bundle;
import android.os.Environment;
import android.util.Log;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

public class MainActivity extends AppCompatActivity {
    
    private static final String TAG = "FileStorage";
    private static final String FILE_NAME = "mi_data_externa.txt";
    
    private EditText editTextData;
    private TextView textViewLoadedData;
    private Button buttonSave, buttonLoad;
    
    private File externalFile;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        editTextData = findViewById(R.id.editText_data);
        textViewLoadedData = findViewById(R.id.textView_loaded_data);
        buttonSave = findViewById(R.id.button_save);
        buttonLoad = findViewById(R.id.button_load);

        // 1. Inicializar el objeto File que apunta a la ruta externa
        externalFile = getExternalStorageFile(FILE_NAME);

        buttonSave.setOnClickListener(v -> saveData());
        buttonLoad.setOnClickListener(v -> loadData());
        
        // Mostrar la ruta del archivo para depuraci칩n
        Toast.makeText(this, "Ruta: " + externalFile.getAbsolutePath(), Toast.LENGTH_LONG).show();
    }
    
    /**
     * Define la ruta del archivo en el almacenamiento externo (SD o memoria principal).
     * Utilizamos getExternalFilesDir() que NO requiere permisos de tiempo de ejecuci칩n.
     */
    private File getExternalStorageFile(String fileName) {
        // Obtenemos el directorio base para documentos en el almacenamiento externo privado de la app.
        // Ruta t칤pica: /storage/emulated/0/Android/data/tu.paquete/files/Documents/
        File storageDir = getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS);

        if (storageDir == null) {
            Log.e(TAG, "El almacenamiento externo no est치 disponible o montado.");
            Toast.makeText(this, "Error: No se puede acceder al almacenamiento externo.", Toast.LENGTH_LONG).show();
            return null;
        }

        // Asegurarse de que el directorio exista
        if (!storageDir.exists()) {
            storageDir.mkdirs();
        }

        return new File(storageDir, fileName);
    }
    
    // ---------------------- GUARDAR DATOS ----------------------

    private void saveData() {
        if (externalFile == null) return;
        
        String data = editTextData.getText().toString();
        
        try (FileOutputStream fos = new FileOutputStream(externalFile);
             OutputStreamWriter osw = new OutputStreamWriter(fos)) {
            
            osw.write(data);
            Toast.makeText(this, "Datos guardados en memoria externa.", Toast.LENGTH_SHORT).show();
            
        } catch (IOException e) {
            Log.e(TAG, "Error al guardar datos: " + e.getMessage());
            Toast.makeText(this, "Fallo al guardar en la SD Externa.", Toast.LENGTH_LONG).show();
        }
    }

    // ---------------------- CARGAR DATOS ----------------------

    private void loadData() {
        if (externalFile == null) return;

        if (!externalFile.exists()) {
            textViewLoadedData.setText("[Archivo no existe]");
            Toast.makeText(this, "El archivo no existe en la SD Externa.", Toast.LENGTH_SHORT).show();
            return;
        }
        
        StringBuilder stringBuilder = new StringBuilder();
        
        try (FileInputStream fis = new FileInputStream(externalFile);
             InputStreamReader isr = new InputStreamReader(fis);
             BufferedReader br = new BufferedReader(isr)) {
            
            String line;
            while ((line = br.readLine()) != null) {
                stringBuilder.append(line).append('\n');
            }
            
            // Eliminar el 칰ltimo salto de l칤nea
            if (stringBuilder.length() > 0) {
                 stringBuilder.setLength(stringBuilder.length() - 1);
            }
            
            textViewLoadedData.setText(stringBuilder.toString());
            Toast.makeText(this, "Datos cargados exitosamente.", Toast.LENGTH_SHORT).show();

        } catch (IOException e) {
            Log.e(TAG, "Error al cargar datos: " + e.getMessage());
            textViewLoadedData.setText("[ERROR AL CARGAR DATOS]");
            Toast.makeText(this, "Fallo al cargar de la SD Externa.", Toast.LENGTH_LONG).show();
        }
    }
}
```