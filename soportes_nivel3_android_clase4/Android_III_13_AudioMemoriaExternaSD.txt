
La diferencia clave es el uso del permiso **`WRITE_EXTERNAL_STORAGE`** (para versiones anteriores a Android 10) y la ruta p√∫blica **`Environment.DIRECTORY_MUSIC`**.

-----

## 1\. Configuraci√≥n del Proyecto y Permisos

### 1.1. `AndroidManifest.xml` (Permisos Necesarios) üé§

Se requiere el permiso de **Micr√≥fono** y, de forma retrocompatible, el de **Escritura en Almacenamiento Externo**.

```xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.RECORD_AUDIO" />
    
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" android:maxSdkVersion="28" />
    
    <uses-feature android:name="android.hardware.microphone" android:required="true" />
    
    <application
        ...
        android:theme="@style/Theme.TuProyectoAudioExterna">

        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>
</manifest>
```

-----

## 2\. Interfaz de Usuario

El layout es id√©ntico al ejemplo de memoria interna.

### 2.1. `res/layout/activity_main.xml` (Layout de Interfaz) üéöÔ∏è

```xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp"
    android:gravity="center_horizontal"
    tools:context=".MainActivity">

    <TextView
        android:id="@+id/text_status"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Estado: Listo"
        android:textSize="18sp"
        android:layout_marginBottom="32dp"/>

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:gravity="center"
        android:layout_marginBottom="16dp">

        <Button
            android:id="@+id/btn_record"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Grabar"
            android:layout_marginEnd="8dp"/>

        <Button
            android:id="@+id/btn_stop_record"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Detener Grabaci√≥n"
            android:enabled="false"/>
    </LinearLayout>

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:gravity="center">

        <Button
            android:id="@+id/btn_play"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Reproducir"
            android:layout_marginEnd="8dp"
            android:enabled="false"/>

        <Button
            android:id="@+id/btn_stop_play"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Detener Reproducci√≥n"
            android:enabled="false"/>
    </LinearLayout>
    
    <TextView
        android:id="@+id/textView_path"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="32dp"
        android:text="Ruta: Ninguna"
        android:textSize="12sp"/>

</LinearLayout>
```

-----

## 3\. L√≥gica Java

### 3.1. `MainActivity.java` (L√≥gica de Java - Audio en Memoria Externa) üíª

El cambio clave se encuentra en el m√©todo `createAudioFile()`, donde se usa **`Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MUSIC)`** para el almacenamiento externo compartido. Adem√°s, se solicita el permiso de `WRITE_EXTERNAL_STORAGE` junto con el de `RECORD_AUDIO`.

```java
package com.curso.ejemplo16audioexterna;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.content.ContextCompat;

import android.Manifest;
import android.content.pm.PackageManager;
import android.media.MediaPlayer;
import android.media.MediaRecorder;
import android.os.Bundle;
import android.os.Environment; // CLAVE para almacenamiento externo
import android.util.Log;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.Map;

public class MainActivity extends AppCompatActivity {
    
    private static final String TAG = "AudioExternal";
    
    private Button btnRecord, btnStopRecord, btnPlay, btnStopPlay;
    private TextView textStatus, textViewPath;
    
    private MediaRecorder mediaRecorder;
    private MediaPlayer mediaPlayer;
    
    private String audioFilePath = null; // Ruta absoluta del archivo de audio en la memoria externa
    
    private ActivityResultLauncher<String[]> requestPermissionsLauncher;

    // Permisos requeridos
    private final String[] REQUIRED_PERMISSIONS = {
        Manifest.permission.RECORD_AUDIO,
        Manifest.permission.WRITE_EXTERNAL_STORAGE // Para compatibilidad con API < 29
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Inicializaci√≥n de Views
        btnRecord = findViewById(R.id.btn_record);
        btnStopRecord = findViewById(R.id.btn_stop_record);
        btnPlay = findViewById(R.id.btn_play);
        btnStopPlay = findViewById(R.id.btn_stop_play);
        textStatus = findViewById(R.id.text_status);
        textViewPath = findViewById(R.id.textView_path);

        // 1. Inicializar Launcher de Permisos M√∫ltiples
        setupPermissionLauncher();
        
        // 2. Configurar Listeners de botones
        btnRecord.setOnClickListener(v -> handleRecordAction());
        btnStopRecord.setOnClickListener(v -> stopRecording());
        btnPlay.setOnClickListener(v -> playRecording());
        btnStopPlay.setOnClickListener(v -> stopPlaying());
        
        // 3. Revisar estado inicial de los permisos
        checkInitialPermissions();
    }
    
    // ---------------------- GESTI√ìN DE PERMISOS ----------------------

    private void setupPermissionLauncher() {
        requestPermissionsLauncher = registerForActivityResult(
            new ActivityResultContracts.RequestMultiplePermissions(),
            permissions -> {
                boolean allGranted = true;
                // Verificar si todos los permisos requeridos fueron concedidos
                for (Map.Entry<String, Boolean> entry : permissions.entrySet()) {
                    if (entry.getValue() == Boolean.FALSE) {
                        // Solo nos preocupa si son permisos que realmente necesitamos
                        if (isPermissionRequired(entry.getKey())) {
                            allGranted = false;
                            break;
                        }
                    }
                }

                if (allGranted) {
                    textStatus.setText("Estado: Permisos Concedidos.");
                    btnRecord.setEnabled(true);
                    Toast.makeText(this, "Permisos concedidos. ‚úÖ", Toast.LENGTH_SHORT).show();
                } else {
                    textStatus.setText("Estado: Permisos Denegados.");
                    btnRecord.setEnabled(false);
                    Toast.makeText(this, "Permisos necesarios denegados. ‚ùå", Toast.LENGTH_LONG).show();
                }
            }
        );
    }
    
    private boolean isPermissionRequired(String permission) {
        // En API 29+, WRITE_EXTERNAL_STORAGE no es necesario, pero lo fue antes.
        // Verificamos si es RECORD_AUDIO o si es WRITE_EXTERNAL_STORAGE y la API es baja.
        return permission.equals(Manifest.permission.RECORD_AUDIO) || 
               (permission.equals(Manifest.permission.WRITE_EXTERNAL_STORAGE) && 
                android.os.Build.VERSION.SDK_INT <= android.os.Build.VERSION_CODES.P);
    }

    private void checkInitialPermissions() {
        boolean allGranted = true;
        for (String permission : REQUIRED_PERMISSIONS) {
            if (isPermissionRequired(permission) && 
                ContextCompat.checkSelfPermission(this, permission) != PackageManager.PERMISSION_GRANTED) {
                allGranted = false;
                break;
            }
        }
        
        if (!allGranted) {
            textStatus.setText("Estado: Solicitando Permisos...");
            btnRecord.setEnabled(false);
            requestPermissionsLauncher.launch(REQUIRED_PERMISSIONS);
        } else {
            textStatus.setText("Estado: Listo para grabar en Almacenamiento Compartido.");
            btnRecord.setEnabled(true);
        }
    }

    private void handleRecordAction() {
        boolean allGranted = true;
        for (String permission : REQUIRED_PERMISSIONS) {
            if (isPermissionRequired(permission) && 
                ContextCompat.checkSelfPermission(this, permission) != PackageManager.PERMISSION_GRANTED) {
                allGranted = false;
                break;
            }
        }
        
        if (allGranted) {
            startRecording();
        } else {
            requestPermissionsLauncher.launch(REQUIRED_PERMISSIONS);
        }
    }
    
    // ---------------------- GRABACI√ìN (MediaRecorder) ----------------------

    private void startRecording() {
        // 1. Crear el archivo de destino en la memoria EXTERNA (p√∫blica)
        try {
            createAudioFile();
        } catch (IOException e) {
            Log.e(TAG, "Error al crear el archivo de audio: " + e.getMessage());
            Toast.makeText(this, "Error al preparar el archivo.", Toast.LENGTH_SHORT).show();
            return;
        }

        // 2. Inicializar MediaRecorder
        mediaRecorder = new MediaRecorder(this);
        mediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
        mediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
        mediaRecorder.setOutputFile(audioFilePath);
        mediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);
        
        try {
            mediaRecorder.prepare();
            mediaRecorder.start();
            
            // Actualizar UI
            textStatus.setText("Estado: Grabando...");
            btnRecord.setEnabled(false);
            btnStopRecord.setEnabled(true);
            btnPlay.setEnabled(false);
            btnStopPlay.setEnabled(false);

            textViewPath.setText("Ruta: " + audioFilePath);
            Toast.makeText(this, "Iniciando grabaci√≥n.", Toast.LENGTH_SHORT).show();
            
        } catch (IOException e) {
            Log.e(TAG, "Fallo en prepare() o start() de MediaRecorder: " + e.getMessage());
            textStatus.setText("Estado: Error de Grabaci√≥n.");
            stopRecording();
        }
    }

    private void stopRecording() {
        if (mediaRecorder != null) {
            try {
                mediaRecorder.stop();
                mediaRecorder.release();
                mediaRecorder = null;
                
                // Actualizar UI
                textStatus.setText("Estado: Grabaci√≥n finalizada.");
                btnRecord.setEnabled(true);
                btnStopRecord.setEnabled(false);
                btnPlay.setEnabled(true);
                btnStopPlay.setEnabled(false);
                
                Toast.makeText(this, "Grabaci√≥n detenida. Archivo guardado.", Toast.LENGTH_SHORT).show();

            } catch (RuntimeException e) {
                 Log.e(TAG, "Error al detener grabaci√≥n (Runtime): " + e.getMessage());
                 if (mediaRecorder != null) {
                     mediaRecorder.release();
                     mediaRecorder = null;
                 }
                 Toast.makeText(this, "Error al detener grabaci√≥n.", Toast.LENGTH_LONG).show();
            }
        }
    }
    
    /**
     * Crea un archivo .3gp con timestamp en el directorio /storage/emulated/0/Music/ 
     * (Memoria Externa / Almacenamiento Compartido).
     */
    private void createAudioFile() throws IOException {
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss", Locale.getDefault()).format(new Date());
        String audioFileName = "AUDIO_EXT_" + timeStamp + "_";

        // CAMBIO CLAVE: Usamos getExternalStoragePublicDirectory para el directorio p√∫blico de M√∫sica
        // Nota: En API 29+ (Android 10+), la forma moderna es MediaStore, pero esto asegura compatibilidad.
        File storageDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MUSIC);
        
        if (!storageDir.exists()) {
            storageDir.mkdirs();
        }

        File audio = File.createTempFile(
                audioFileName,  
                ".3gp",         
                storageDir      
        );
        
        audioFilePath = audio.getAbsolutePath();
    }

    // ---------------------- REPRODUCCI√ìN (MediaPlayer) ----------------------

    private void playRecording() {
        if (audioFilePath == null || !new File(audioFilePath).exists()) {
            Toast.makeText(this, "No hay audio grabado o el archivo no existe.", Toast.LENGTH_SHORT).show();
            return;
        }

        mediaPlayer = new MediaPlayer();
        try {
            mediaPlayer.setDataSource(audioFilePath);
            mediaPlayer.prepare();
            mediaPlayer.start();
            
            // Actualizar UI
            textStatus.setText("Estado: Reproduciendo...");
            btnRecord.setEnabled(false);
            btnStopRecord.setEnabled(false);
            btnPlay.setEnabled(false);
            btnStopPlay.setEnabled(true);
            
            // Listener para cuando la reproducci√≥n termine
            mediaPlayer.setOnCompletionListener(mp -> stopPlaying());
            
        } catch (IOException e) {
            Log.e(TAG, "Fallo al reproducir audio: " + e.getMessage());
            textStatus.setText("Estado: Error de Reproducci√≥n.");
            stopPlaying();
        }
    }

    private void stopPlaying() {
        if (mediaPlayer != null) {
            mediaPlayer.release();
            mediaPlayer = null;
            
            // Actualizar UI
            textStatus.setText("Estado: Reproducci√≥n detenida.");
            btnRecord.setEnabled(true);
            btnStopRecord.setEnabled(false);
            btnPlay.setEnabled(true);
            btnStopPlay.setEnabled(false);
        }
    }

    // ---------------------- CICLO DE VIDA ----------------------

    @Override
    protected void onStop() {
        super.onStop();
        // Limpiar recursos al salir de la actividad
        if (mediaRecorder != null) {
            mediaRecorder.release();
            mediaRecorder = null;
        }
        if (mediaPlayer != null) {
            mediaPlayer.release();
            mediaPlayer = null;
        }
    }
}
```