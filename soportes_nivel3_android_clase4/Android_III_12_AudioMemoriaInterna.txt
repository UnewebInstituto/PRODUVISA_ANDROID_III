
Este ejemplo utiliza la clase **`MediaRecorder`** para la grabaci√≥n y **`MediaPlayer`** para la reproducci√≥n, guardando el archivo **.3gp** en el directorio `files/audio/` de tu aplicaci√≥n.

-----

## 1\. Configuraci√≥n del Proyecto y Permisos

### 1.1. `AndroidManifest.xml` (Permisos Necesarios) üé§

Necesitas los permisos para acceder al **Micr√≥fono** y para el **almacenamiento espec√≠fico de la aplicaci√≥n** (aunque este √∫ltimo no requiere permisos de *runtime* en el directorio privado, es est√°ndar declarar la caracter√≠stica).

```xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.RECORD_AUDIO" />
    
    <uses-feature android:name="android.hardware.microphone" android:required="true" />
    
    <application
        ...
        android:theme="@style/Theme.TuProyectoAudioInterna">

        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>
</manifest>
```

-----

## 2\. Interfaz de Usuario

### 2.1. `res/layout/activity_main.xml` (Layout de Interfaz) üéöÔ∏è

Un layout simple con botones para el ciclo de vida del audio: **Grabar**, **Detener Grabaci√≥n**, **Reproducir** y **Detener Reproducci√≥n**.

```xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp"
    android:gravity="center_horizontal"
    tools:context=".MainActivity">

    <TextView
        android:id="@+id/text_status"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Estado: Listo"
        android:textSize="18sp"
        android:layout_marginBottom="32dp"/>

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:gravity="center"
        android:layout_marginBottom="16dp">

        <Button
            android:id="@+id/btn_record"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Grabar"
            android:layout_marginEnd="8dp"/>

        <Button
            android:id="@+id/btn_stop_record"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Detener Grabaci√≥n"
            android:enabled="false"/>
    </LinearLayout>

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:gravity="center">

        <Button
            android:id="@+id/btn_play"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Reproducir"
            android:layout_marginEnd="8dp"
            android:enabled="false"/>

        <Button
            android:id="@+id/btn_stop_play"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Detener Reproducci√≥n"
            android:enabled="false"/>
    </LinearLayout>
    
    <TextView
        android:id="@+id/textView_path"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="32dp"
        android:text="Ruta: Ninguna"
        android:textSize="12sp"/>

</LinearLayout>
```

-----

## 3\. L√≥gica Java

### 3.1. `MainActivity.java` (L√≥gica de Java - Audio en Memoria Interna) üíª

El c√≥digo maneja la solicitud del permiso `RECORD_AUDIO` y utiliza `MediaRecorder` y `MediaPlayer` para la grabaci√≥n y reproducci√≥n, respectivamente.

```java
package com.curso.ejemplo10audiomemoriainterna;

import android.os.Bundle;

import androidx.activity.EdgeToEdge;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;

import androidx.core.content.ContextCompat;

import android.Manifest;
import android.content.pm.PackageManager;
import android.media.MediaPlayer;
import android.media.MediaRecorder;
import android.os.Build; // Importar la clase Build
import android.os.Bundle;
import android.util.Log;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

public class MainActivity extends AppCompatActivity {

    private static final String TAG = "AudioInternal";

    private Button btnRecord, btnStopRecord, btnPlay, btnStopPlay;
    private TextView textStatus, textViewPath;

    private MediaRecorder mediaRecorder;
    private MediaPlayer mediaPlayer;

    private String audioFilePath = null; // Ruta absoluta del archivo de audio en la memoria interna

    private ActivityResultLauncher<String> requestPermissionLauncher;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        EdgeToEdge.enable(this);
        setContentView(R.layout.activity_main);

        // Inicializaci√≥n de Views
        btnRecord = findViewById(R.id.btn_record);
        btnStopRecord = findViewById(R.id.btn_stop_record);
        btnPlay = findViewById(R.id.btn_play);
        btnStopPlay = findViewById(R.id.btn_stop_play);
        textStatus = findViewById(R.id.text_status);
        textViewPath = findViewById(R.id.textView_path);

        // 1. Inicializar Launcher de Permisos
        setupPermissionLauncher();

        // 2. Configurar Listeners de botones
        btnRecord.setOnClickListener(v -> handleRecordAction());
        btnStopRecord.setOnClickListener(v -> stopRecording());
        btnPlay.setOnClickListener(v -> playRecording());
        btnStopPlay.setOnClickListener(v -> stopPlaying());

        // 3. Revisar estado inicial del permiso
        checkInitialPermissions();
    }

    // ---------------------- GESTI√ìN DE PERMISOS ----------------------

    private void setupPermissionLauncher() {
        requestPermissionLauncher = registerForActivityResult(
                new ActivityResultContracts.RequestPermission(),
                isGranted -> {
                    if (isGranted) {
                        textStatus.setText("Estado: Permiso Concedido. ‚úÖ");
                        // 1. CORRECCI√ìN: Si el usuario concede el permiso, iniciamos la grabaci√≥n
                        // Esto soluciona el crash si el usuario toca "Grabar" e inmediatamente concede el permiso.
                        Toast.makeText(this, "Permiso de Micr√≥fono concedido. Iniciando grabaci√≥n.", Toast.LENGTH_SHORT).show();
                        startRecording(); 
                    } else {
                        textStatus.setText("Estado: Permiso Denegado.");
                        btnRecord.setEnabled(false);
                        Toast.makeText(this, "Permiso de Micr√≥fono denegado. ‚ùå", Toast.LENGTH_LONG).show();
                    }
                }
        );
    }

    private void checkInitialPermissions() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO) != PackageManager.PERMISSION_GRANTED) {
            textStatus.setText("Estado: Solicitando Permiso...");
            btnRecord.setEnabled(false);
            // La solicitud se maneja aqu√≠. El resultado y la habilitaci√≥n del bot√≥n
            // se manejan en setupPermissionLauncher().
            requestPermissionLauncher.launch(Manifest.permission.RECORD_AUDIO);
        } else {
            textStatus.setText("Estado: Listo para grabar.");
            btnRecord.setEnabled(true);
        }
    }


    private void handleRecordAction() {
        // Al tocar el bot√≥n, se verifica si el permiso ya fue dado
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO) == PackageManager.PERMISSION_GRANTED) {
            // Permiso OK: Inicia la grabaci√≥n
            startRecording();
        } else {
            // Permiso NO OK: Lanza la solicitud. La grabaci√≥n se iniciar√° 
            // solo si el permiso se concede dentro del launcher.
            requestPermissionLauncher.launch(Manifest.permission.RECORD_AUDIO);
        }
    }

    private void startRecording() {
        // 1. Crear el archivo de destino en la memoria interna
        try {
            createAudioFile();
        } catch (IOException e) {
            Log.e(TAG, "Error al crear el archivo de audio: " + e.getMessage());
            Toast.makeText(this, "Error al preparar el archivo.", Toast.LENGTH_SHORT).show();
            return;
        }

        // 2. CORRECCI√ìN DE COMPATIBILIDAD API (MediaRecorder Constructor)
        try {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                // API 31 (Android 12) o superior: usar el constructor con Context
                mediaRecorder = new MediaRecorder(this);
            } else {
                // API 30 o inferior: usar el constructor sin argumentos
                mediaRecorder = new MediaRecorder();
            }

            mediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
            mediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP); // Formato 3GP
            mediaRecorder.setOutputFile(audioFilePath);
            mediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);

            mediaRecorder.prepare();
            mediaRecorder.start();

            // Actualizar UI
            textStatus.setText("Estado: Grabando...");
            btnRecord.setEnabled(false);
            btnStopRecord.setEnabled(true);
            btnPlay.setEnabled(false);
            btnStopPlay.setEnabled(false);

            textViewPath.setText("Ruta: " + audioFilePath);
            Toast.makeText(this, "Iniciando grabaci√≥n.", Toast.LENGTH_SHORT).show();

        } catch (IOException e) {
            Log.e(TAG, "Fallo en prepare() o start() de MediaRecorder: " + e.getMessage());
            textStatus.setText("Estado: Error de Grabaci√≥n (IO).");
            stopRecording(); // Intentar limpiar
        } catch (Exception e) {
            // Capturar SecurityException si el permiso falla, aunque la l√≥gica del launcher debe evitar esto
             Log.e(TAG, "Error al iniciar MediaRecorder: " + e.getMessage());
            textStatus.setText("Estado: Error de Grabaci√≥n.");
            stopRecording();
        }
    }

    private void stopRecording() {
        if (mediaRecorder != null) {
            try {
                // El log para detener la grabaci√≥n se mantiene aqu√≠
                mediaRecorder.stop();
                mediaRecorder.release();
                mediaRecorder = null;

                // Actualizar UI
                textStatus.setText("Estado: Grabaci√≥n finalizada.");
                btnRecord.setEnabled(true);
                btnStopRecord.setEnabled(false);
                btnPlay.setEnabled(true); // Habilitar reproducci√≥n
                btnStopPlay.setEnabled(false);

                Toast.makeText(this, "Grabaci√≥n detenida. Archivo guardado.", Toast.LENGTH_SHORT).show();

            } catch (RuntimeException e) {
                // Esto puede ocurrir si se llama a stop inmediatamente despu√©s de start.
                Log.e(TAG, "Error al detener grabaci√≥n (Runtime): " + e.getMessage());
                // Asegurar liberaci√≥n de recursos
                mediaRecorder.release();
                mediaRecorder = null;
                Toast.makeText(this, "Error al detener grabaci√≥n. Intenta grabar m√°s tiempo.", Toast.LENGTH_LONG).show();
            }
        }
    }

    /**
     * Crea un archivo .3gp con timestamp en el directorio /data/data/tu.paquete/files/audio/
     * (Memoria Interna de la Aplicaci√≥n).
     */
    private void createAudioFile() throws IOException {
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss", Locale.getDefault()).format(new Date());
        String audioFileName = "AUDIO_" + timeStamp + "_";

        // Usamos getFilesDir() para la memoria interna y el subdirectorio "audio"
        File storageDir = new File(getFilesDir(), "audio");

        if (!storageDir.exists()) {
            storageDir.mkdirs();
        }

        File audio = File.createTempFile(
                audioFileName,
                ".3gp",
                storageDir
        );

        audioFilePath = audio.getAbsolutePath();
    }

    // ---------------------- REPRODUCCI√ìN (MediaPlayer) ----------------------
    // El c√≥digo de reproducci√≥n se mantiene igual, ya que no ten√≠a problemas de inicializaci√≥n o API.

    private void playRecording() {
        if (audioFilePath == null) {
            Toast.makeText(this, "No hay audio grabado para reproducir.", Toast.LENGTH_SHORT).show();
            return;
        }

        mediaPlayer = new MediaPlayer();
        try {
            mediaPlayer.setDataSource(audioFilePath);
            mediaPlayer.prepare();
            mediaPlayer.start();

            // Actualizar UI
            textStatus.setText("Estado: Reproduciendo...");
            btnRecord.setEnabled(false);
            btnStopRecord.setEnabled(false);
            btnPlay.setEnabled(false);
            btnStopPlay.setEnabled(true);

            // Listener para cuando la reproducci√≥n termine
            mediaPlayer.setOnCompletionListener(mp -> stopPlaying());

        } catch (IOException e) {
            Log.e(TAG, "Fallo al reproducir audio: " + e.getMessage());
            textStatus.setText("Estado: Error de Reproducci√≥n.");
            stopPlaying(); // Limpiar el estado
        }
    }

    private void stopPlaying() {
        if (mediaPlayer != null) {
            mediaPlayer.release();
            mediaPlayer = null;

            // Actualizar UI
            textStatus.setText("Estado: Reproducci√≥n detenida.");
            btnRecord.setEnabled(true);
            btnStopRecord.setEnabled(false);
            btnPlay.setEnabled(true); // Re-habilitar reproducci√≥n
            btnStopPlay.setEnabled(false);
        }
    }

    // ---------------------- CICLO DE VIDA ----------------------

    @Override
    protected void onStop() {
        super.onStop();
        // Limpiar recursos al salir de la actividad
        if (mediaRecorder != null) {
            mediaRecorder.release();
            mediaRecorder = null;
        }
        if (mediaPlayer != null) {
            mediaPlayer.release();
            mediaPlayer = null;
        }
    }
}
```