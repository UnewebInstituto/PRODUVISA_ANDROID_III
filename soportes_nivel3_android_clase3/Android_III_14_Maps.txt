No tengo una API Key de Google Maps y quiero usar una alternativa de c√≥digo abierto, **OpenStreetMap (OSM)** con la librer√≠a **OSMDroid** es la opci√≥n est√°ndar en el desarrollo Android con Java.

OSMDroid funciona sin necesidad de claves de API ni costos de uso, ya que consume los datos de los servidores p√∫blicos de OpenStreetMap.

A continuaci√≥n, tienes el ejemplo completo, que incluye la configuraci√≥n, el dise√±o y el c√≥digo Java para mostrar un mapa OSM, centrarlo y a√±adir un marcador.

-----

## üó∫Ô∏è Ejemplo de OpenStreetMap con OSMDroid (Sin API Key)

### 1\. Configuraci√≥n del Proyecto y Permisos

#### 1.1. Dependencias (`build.gradle` - Nivel M√≥dulo: app) üõ†Ô∏è

A√±ade las dependencias para OSMDroid y `preference-ktx` (necesaria para la configuraci√≥n interna del cach√© de mapas).

```gradle
dependencies {
    // ... otras dependencias
    implementation 'org.osmdroid:osmdroid-android:6.1.18' 
    implementation 'androidx.preference:preference-ktx:1.2.1' 
}
```

-----

#### 1.2. Archivo `AndroidManifest.xml` (Permisos) üåê

Necesitas el permiso de **Internet** para descargar los *tiles* del mapa. El permiso de **almacenamiento** es opcional, pero se incluye para guardar los *tiles* en cach√© y mejorar la velocidad.

```xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    ...>
    
    <uses-permission android:name="android.permission.INTERNET" />
    
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" android:maxSdkVersion="28" />

    <application
        ...
        >
        ...
    </application>
</manifest>
```

-----

## 2\. Layout XML: `activity_main.xml` üìç

La vista que muestra el mapa es la clase **`org.osmdroid.views.MapView`**.

```xml
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <org.osmdroid.views.MapView
        android:id="@+id/map_osm"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />

</RelativeLayout>
```

-----

## 3\. C√≥digo Java: `MainActivity.java` üíª

El c√≥digo configura el mapa en tiempo de ejecuci√≥n, maneja los permisos y realiza las acciones de centrado y marcadores usando las clases de la librer√≠a OSMDroid.

```java
package com.ejemplo.osmdroidmap;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import android.Manifest;
import android.content.Context;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.widget.Toast;

import org.osmdroid.config.Configuration;
import org.osmdroid.tileprovider.tilesource.TileSourceFactory;
import org.osmdroid.util.GeoPoint;
import org.osmdroid.views.MapView;
import org.osmdroid.views.overlay.Marker;
import org.osmdroid.views.overlay.compass.CompassOverlay;

import java.util.ArrayList;

public class MainActivity extends AppCompatActivity {

    private final int REQUEST_PERMISSIONS_CODE = 1;
    private MapView map;
    
    // Coordenadas para centrar el mapa (Caracas, Venezuela)
    private final double CARACAS_LAT = 10.4806;
    private final double CARACAS_LON = -66.9036;

    // Array de permisos que necesitamos
    private final String[] REQUIRED_PERMISSIONS = {
        Manifest.permission.WRITE_EXTERNAL_STORAGE,
        Manifest.permission.ACCESS_FINE_LOCATION,
        Manifest.permission.ACCESS_COARSE_LOCATION
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        
        // 1. Configuraci√≥n de OSMDroid (IMPORTANTE: Debe ser antes de setContentView)
        // Inicializa la configuraci√≥n global para cach√©, User-Agent, etc.
        Context ctx = getApplicationContext();
        Configuration.getInstance().load(ctx, PreferenceManager.getDefaultSharedPreferences(ctx));
        
        setContentView(R.layout.activity_main);
        
        // 2. Solicitar permisos de forma din√°mica
        requestPermissionsIfNecessary(REQUIRED_PERMISSIONS);
        
        // 3. Obtener referencia al MapView
        map = findViewById(R.id.map_osm);
        
        // 4. Configurar el MapView
        map.setTileSource(TileSourceFactory.MAPNIK); // Usar el proveedor est√°ndar de OSM
        map.setBuiltInZoomControls(true); // Habilitar controles de zoom
        map.setMultiTouchControls(true); // Habilitar zoom con dos dedos

        // 5. Centrar el mapa en Caracas
        GeoPoint startPoint = new GeoPoint(CARACAS_LAT, CARACAS_LON);
        map.getController().setZoom(10.0); // Nivel de zoom 10
        map.getController().setCenter(startPoint);

        // 6. A√±adir un marcador
        addMarkerToMap(startPoint, "Ubicaci√≥n Centrada (Caracas)");
        
        // 7. A√±adir un overlay de br√∫jula (opcional)
        CompassOverlay compassOverlay = new CompassOverlay(ctx, map);
        compassOverlay.enableCompass();
        map.getOverlays().add(compassOverlay);
    }
    
    /**
     * A√±ade un marcador en un GeoPoint espec√≠fico.
     */
    private void addMarkerToMap(GeoPoint point, String title) {
        Marker marker = new Marker(map);
        marker.setPosition(point);
        // Anclar el marcador al centro inferior de su posici√≥n (para que la punta apunte a la ubicaci√≥n)
        marker.setAnchor(Marker.ANCHOR_CENTER, Marker.ANCHOR_BOTTOM); 
        marker.setTitle(title);
        map.getOverlays().add(marker);
        map.invalidate(); // Forzar la actualizaci√≥n del mapa
    }

    // ---------------------- GESTI√ìN DEL CICLO DE VIDA ----------------------
    
    @Override
    protected void onResume() {
        super.onResume();
        // Cargar tiles, refrescar el estado del mapa y reanudar la br√∫jula, etc.
        map.onResume(); 
    }

    @Override
    protected void onPause() {
        super.onPause();
        // Pausar el mapa y guardar el estado
        map.onPause(); 
    }
    
    // ---------------------- GESTI√ìN DE PERMISOS ----------------------

    /**
     * Verifica y solicita permisos necesarios en tiempo de ejecuci√≥n.
     */
    private void requestPermissionsIfNecessary(String[] permissions) {
        ArrayList<String> permissionsToRequest = new ArrayList<>();
        for (String permission : permissions) {
            // Solo necesitamos solicitar WRITE_EXTERNAL_STORAGE si la API es baja.
            if (permission.equals(Manifest.permission.WRITE_EXTERNAL_STORAGE) && 
                android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.P) {
                continue; // Saltar si es WRITE_EXTERNAL_STORAGE en Android 10+
            }
            
            if (ContextCompat.checkSelfPermission(this, permission) != PackageManager.PERMISSION_GRANTED) {
                permissionsToRequest.add(permission);
            }
        }
        if (permissionsToRequest.size() > 0) {
            ActivityCompat.requestPermissions(
                    this,
                    permissionsToRequest.toArray(new String[0]),
                    REQUEST_PERMISSIONS_CODE);
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == REQUEST_PERMISSIONS_CODE) {
            // Refrescar la configuraci√≥n del mapa despu√©s de que se hayan otorgado los permisos
            Configuration.getInstance().load(this, PreferenceManager.getDefaultSharedPreferences(this));
            map.invalidate(); 
        }
    }
}
```